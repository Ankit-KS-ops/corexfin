```
You can use the ALTER TABLE statement in PostgreSQL to modify existing columns, add constraints like foreign keys, unique constraints, and not-null constraints. Here are the syntax and examples for each operation:

1. Altering a Column Type
To change the data type of an existing column:

ALTER TABLE table_name
ALTER COLUMN column_name TYPE new_data_type;
Example:

ALTER TABLE User
ALTER COLUMN username TYPE VARCHAR(100);
2. Adding a Foreign Key Constraint
To add a foreign key constraint to a column:

ALTER TABLE table_name
ADD CONSTRAINT constraint_name FOREIGN KEY (column_name)
REFERENCES referenced_table(referenced_column);
Example:

ALTER TABLE User
ADD CONSTRAINT fk_user_bank FOREIGN KEY (bank_id)
REFERENCES Bank(bank_id);
3. Adding a Unique Constraint
To add a unique constraint:

ALTER TABLE table_name
ADD CONSTRAINT constraint_name UNIQUE (column_name);
Example:

ALTER TABLE User
ADD CONSTRAINT unique_username UNIQUE (username);
4. Adding a Not Null Constraint
To set a column to NOT NULL:

ALTER TABLE table_name
ALTER COLUMN column_name SET NOT NULL;
Example:

ALTER TABLE User
ALTER COLUMN password SET NOT NULL;
Summary of Commands
Change Column Type: ALTER COLUMN column_name TYPE new_data_type
Add Foreign Key: ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES referenced_table(referenced_column)
Add Unique Constraint: ADD CONSTRAINT constraint_name UNIQUE (column_name)
Set Not Null: ALTER COLUMN column_name SET NOT NULL
Considerations:
Ensure that the new types are compatible with existing data when altering a column type.
Adding constraints can fail if existing data violates the constraint rules, so you may need to clean up data first.
```